#!/usr/bin/env python
#
# Copyright (C) 2013 DNAnexus, Inc.
#   This file is part of dnanexus-example-applets.
#   You may use this file under the terms of the Apache License, Version 2.0;
#   see the License.md file for more information.


# picard_sam_to_fastq 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See http://wiki.dnanexus.com/Developer-Portal for documentation and
# tutorials on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

import os
import dxpy

import subprocess

@dxpy.entry_point('main')
def main(input_bam, paired=True, params=''):
    input_bam = dxpy.DXFile(input_bam)
    base_name = remove_extensions(input_bam.describe()['name'], [".bam", ".BAM", ".sam", ".SAM"])

    # boilerplate stuff needed to get dnanexus samtools running in the ubuntu
    # 12.04 execution environment
    subprocess.check_call("rm /etc/apt/apt.conf.d/99dnanexus", shell=True)
    subprocess.check_call("add-apt-repository -y ppa:ubuntu-toolchain-r/test", shell=True)
    subprocess.check_call("apt-get update", shell=True)
    subprocess.check_call("apt-get install -y gcc-4.8 g++-4.8", shell=True)
    subprocess.check_call("update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 50", shell=True)
    subprocess.check_call("update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 50", shell=True)

    # create input.bam sorted by read name    
    subprocess.check_call("bzip2 -d /samtools.bz2", shell=True)
    subprocess.check_call("chmod +x /samtools", shell=True)
    subprocess.check_call("dx cat %s | /samtools rocksort -n -@ 2 -m 2G -l 1 - input" % input_bam.get_id(), shell=True)

    # run picard SamToFastq
    command = "java -Xmx6g -jar /opt/jar/SamToFastq.jar INPUT=input.bam RE_REVERSE=true F=%s_1.fastq" % base_name
    if paired:
        command += " F2=%s_2.fastq" % base_name
    if len(params) > 0:
        command += ' ' + params
    subprocess.check_call(command, shell=True)

    # compress fastq files
    subprocess.check_call("pigz %s_1.fastq" % base_name, shell=True)
    if paired:
        subprocess.check_call("pigz %s_2.fastq" % base_name, shell=True)

    # upload to platform
    output = {}
    fastq_file = dxpy.upload_local_file("%s_1.fastq.gz" % base_name);
    output["fastq_file"] = dxpy.dxlink(fastq_file)
    if paired:
        paired_fastq_file = dxpy.upload_local_file("%s_2.fastq.gz" % base_name);
        output["paired_fastq_file"] = dxpy.dxlink(paired_fastq_file)

    return output

def remove_extensions(name, extensions):
    name = name[::-1]
    for x in extensions:
        name = name.replace(x[::-1], "", 1)
    return name[::-1]

dxpy.run()
